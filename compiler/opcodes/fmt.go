package opcodes

func (op Opcode) String() string {
	switch op {
	case Nop:
		return "Nop"
	case Unreachable:
		return "Unreachable"
	case Select:
		return "Select"
	case I32Const:
		return "I32Const"
	case I32Add:
		return "I32Add"
	case I32Sub:
		return "I32Sub"
	case I32Mul:
		return "I32Mul"
	case I32DivS:
		return "I32DivS"
	case I32DivU:
		return "I32DivU"
	case I32RemS:
		return "I32RemS"
	case I32RemU:
		return "I32RemU"
	case I32And:
		return "I32And"
	case I32Or:
		return "I32Or"
	case I32Xor:
		return "I32Xor"
	case I32Shl:
		return "I32Shl"
	case I32ShrS:
		return "I32ShrS"
	case I32ShrU:
		return "I32ShrU"
	case I32Rotl:
		return "I32Rotl"
	case I32Rotr:
		return "I32Rotr"
	case I32Clz:
		return "I32Clz"
	case I32Ctz:
		return "I32Ctz"
	case I32PopCnt:
		return "I32PopCnt"
	case I32EqZ:
		return "I32EqZ"
	case I32Eq:
		return "I32Eq"
	case I32Ne:
		return "I32Ne"
	case I32LtS:
		return "I32LtS"
	case I32LtU:
		return "I32LtU"
	case I32LeS:
		return "I32LeS"
	case I32LeU:
		return "I32LeU"
	case I32GtS:
		return "I32GtS"
	case I32GtU:
		return "I32GtU"
	case I32GeS:
		return "I32GeS"
	case I32GeU:
		return "I32GeU"
	case I64Const:
		return "I64Const"
	case I64Add:
		return "I64Add"
	case I64Sub:
		return "I64Sub"
	case I64Mul:
		return "I64Mul"
	case I64DivS:
		return "I64DivS"
	case I64DivU:
		return "I64DivU"
	case I64RemS:
		return "I64RemS"
	case I64RemU:
		return "I64RemU"
	case I64Rotl:
		return "I64Rotl"
	case I64Rotr:
		return "I64Rotr"
	case I64Clz:
		return "I64Clz"
	case I64Ctz:
		return "I64Ctz"
	case I64PopCnt:
		return "I64PopCnt"
	case I64EqZ:
		return "I64EqZ"
	case I64And:
		return "I64And"
	case I64Or:
		return "I64Or"
	case I64Xor:
		return "I64Xor"
	case I64Shl:
		return "I64Shl"
	case I64ShrS:
		return "I64ShrS"
	case I64ShrU:
		return "I64ShrU"
	case I64Eq:
		return "I64Eq"
	case I64Ne:
		return "I64Ne"
	case I64LtS:
		return "I64LtS"
	case I64LtU:
		return "I64LtU"
	case I64LeS:
		return "I64LeS"
	case I64LeU:
		return "I64LeU"
	case I64GtS:
		return "I64GtS"
	case I64GtU:
		return "I64GtU"
	case I64GeS:
		return "I64GeS"
	case I64GeU:
		return "I64GeU"
	case F32Add:
		return "F32Add"
	case F32Sub:
		return "F32Sub"
	case F32Mul:
		return "F32Mul"
	case F32Div:
		return "F32Div"
	case F32Sqrt:
		return "F32Sqrt"
	case F32Min:
		return "F32Min"
	case F32Max:
		return "F32Max"
	case F32Ceil:
		return "F32Ceil"
	case F32Floor:
		return "F32Floor"
	case F32Trunc:
		return "F32Trunc"
	case F32Nearest:
		return "F32Nearest"
	case F32Abs:
		return "F32Abs"
	case F32Neg:
		return "F32Neg"
	case F32CopySign:
		return "F32CopySign"
	case F32Eq:
		return "F32Eq"
	case F32Ne:
		return "F32Ne"
	case F32Lt:
		return "F32Lt"
	case F32Le:
		return "F32Le"
	case F32Gt:
		return "F32Gt"
	case F32Ge:
		return "F32Ge"
	case F64Add:
		return "F64Add"
	case F64Sub:
		return "F64Sub"
	case F64Mul:
		return "F64Mul"
	case F64Div:
		return "F64Div"
	case F64Sqrt:
		return "F64Sqrt"
	case F64Min:
		return "F64Min"
	case F64Max:
		return "F64Max"
	case F64Ceil:
		return "F64Ceil"
	case F64Floor:
		return "F64Floor"
	case F64Trunc:
		return "F64Trunc"
	case F64Nearest:
		return "F64Nearest"
	case F64Abs:
		return "F64Abs"
	case F64Neg:
		return "F64Neg"
	case F64CopySign:
		return "F64CopySign"
	case F64Eq:
		return "F64Eq"
	case F64Ne:
		return "F64Ne"
	case F64Lt:
		return "F64Lt"
	case F64Le:
		return "F64Le"
	case F64Gt:
		return "F64Gt"
	case F64Ge:
		return "F64Ge"
	case I32WrapI64:
		return "I32WrapI64"
	case I64ExtendUI32:
		return "I64ExtendUI32"
	case I64ExtendSI32:
		return "I64ExtendSI32"
	case I32Load:
		return "I32Load"
	case I64Load:
		return "I64Load"
	case I32Store:
		return "I32Store"
	case I64Store:
		return "I64Store"
	case I32Load8S:
		return "I32Load8S"
	case I32Load16S:
		return "I32Load16S"
	case I64Load8S:
		return "I64Load8S"
	case I64Load16S:
		return "I64Load16S"
	case I64Load32S:
		return "I64Load32S"
	case I32Load8U:
		return "I32Load8U"
	case I32Load16U:
		return "I32Load16U"
	case I64Load8U:
		return "I64Load8U"
	case I64Load16U:
		return "I64Load16U"
	case I64Load32U:
		return "I64Load32U"
	case I32Store8:
		return "I32Store8"
	case I32Store16:
		return "I32Store16"
	case I64Store8:
		return "I64Store8"
	case I64Store16:
		return "I64Store16"
	case I64Store32:
		return "I64Store32"
	case Jmp:
		return "Jmp"
	case JmpIf:
		return "JmpIf"
	case JmpTable:
		return "JmpTable"
	case ReturnValue:
		return "ReturnValue"
	case ReturnVoid:
		return "ReturnVoid"
	case GetLocal:
		return "GetLocal"
	case SetLocal:
		return "SetLocal"
	case GetGlobal:
		return "GetGlobal"
	case SetGlobal:
		return "SetGlobal"
	case Call:
		return "Call"
	case CallIndirect:
		return "CallIndirect"
	case InvokeImport:
		return "InvokeImport"
	case CurrentMemory:
		return "CurrentMemory"
	case GrowMemory:
		return "GrowMemory"
	case Phi:
		return "Phi"
	}
	return "Unknown"
}

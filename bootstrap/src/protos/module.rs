// This file is generated by rust-protobuf 2.4.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ModuleInfo {
    // message fields
    pub types: ::protobuf::RepeatedField<FuncType>,
    pub functions: ::protobuf::RepeatedField<FuncInfo>,
    pub func_imports: ::protobuf::RepeatedField<FuncImportInfo>,
    pub tables: ::protobuf::RepeatedField<TableInfo>,
    pub memories: ::protobuf::RepeatedField<MemoryInfo>,
    pub start_func: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ModuleInfo {
    pub fn new() -> ModuleInfo {
        ::std::default::Default::default()
    }

    // repeated .FuncType types = 1;

    pub fn clear_types(&mut self) {
        self.types.clear();
    }

    // Param is passed by value, moved
    pub fn set_types(&mut self, v: ::protobuf::RepeatedField<FuncType>) {
        self.types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_types(&mut self) -> &mut ::protobuf::RepeatedField<FuncType> {
        &mut self.types
    }

    // Take field
    pub fn take_types(&mut self) -> ::protobuf::RepeatedField<FuncType> {
        ::std::mem::replace(&mut self.types, ::protobuf::RepeatedField::new())
    }

    pub fn get_types(&self) -> &[FuncType] {
        &self.types
    }

    // repeated .FuncInfo functions = 2;

    pub fn clear_functions(&mut self) {
        self.functions.clear();
    }

    // Param is passed by value, moved
    pub fn set_functions(&mut self, v: ::protobuf::RepeatedField<FuncInfo>) {
        self.functions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_functions(&mut self) -> &mut ::protobuf::RepeatedField<FuncInfo> {
        &mut self.functions
    }

    // Take field
    pub fn take_functions(&mut self) -> ::protobuf::RepeatedField<FuncInfo> {
        ::std::mem::replace(&mut self.functions, ::protobuf::RepeatedField::new())
    }

    pub fn get_functions(&self) -> &[FuncInfo] {
        &self.functions
    }

    // repeated .FuncImportInfo func_imports = 3;

    pub fn clear_func_imports(&mut self) {
        self.func_imports.clear();
    }

    // Param is passed by value, moved
    pub fn set_func_imports(&mut self, v: ::protobuf::RepeatedField<FuncImportInfo>) {
        self.func_imports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_func_imports(&mut self) -> &mut ::protobuf::RepeatedField<FuncImportInfo> {
        &mut self.func_imports
    }

    // Take field
    pub fn take_func_imports(&mut self) -> ::protobuf::RepeatedField<FuncImportInfo> {
        ::std::mem::replace(&mut self.func_imports, ::protobuf::RepeatedField::new())
    }

    pub fn get_func_imports(&self) -> &[FuncImportInfo] {
        &self.func_imports
    }

    // repeated .TableInfo tables = 4;

    pub fn clear_tables(&mut self) {
        self.tables.clear();
    }

    // Param is passed by value, moved
    pub fn set_tables(&mut self, v: ::protobuf::RepeatedField<TableInfo>) {
        self.tables = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tables(&mut self) -> &mut ::protobuf::RepeatedField<TableInfo> {
        &mut self.tables
    }

    // Take field
    pub fn take_tables(&mut self) -> ::protobuf::RepeatedField<TableInfo> {
        ::std::mem::replace(&mut self.tables, ::protobuf::RepeatedField::new())
    }

    pub fn get_tables(&self) -> &[TableInfo] {
        &self.tables
    }

    // repeated .MemoryInfo memories = 5;

    pub fn clear_memories(&mut self) {
        self.memories.clear();
    }

    // Param is passed by value, moved
    pub fn set_memories(&mut self, v: ::protobuf::RepeatedField<MemoryInfo>) {
        self.memories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_memories(&mut self) -> &mut ::protobuf::RepeatedField<MemoryInfo> {
        &mut self.memories
    }

    // Take field
    pub fn take_memories(&mut self) -> ::protobuf::RepeatedField<MemoryInfo> {
        ::std::mem::replace(&mut self.memories, ::protobuf::RepeatedField::new())
    }

    pub fn get_memories(&self) -> &[MemoryInfo] {
        &self.memories
    }

    // uint32 start_func = 6;

    pub fn clear_start_func(&mut self) {
        self.start_func = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_func(&mut self, v: u32) {
        self.start_func = v;
    }

    pub fn get_start_func(&self) -> u32 {
        self.start_func
    }
}

impl ::protobuf::Message for ModuleInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.types {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.functions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.func_imports {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tables {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.memories {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.types)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.functions)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.func_imports)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tables)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.memories)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.start_func = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.types {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.functions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.func_imports {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.tables {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.memories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.start_func != 0 {
            my_size += ::protobuf::rt::value_size(6, self.start_func, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.types {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.functions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.func_imports {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.tables {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.memories {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.start_func != 0 {
            os.write_uint32(6, self.start_func)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModuleInfo {
        ModuleInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FuncType>>(
                    "types",
                    |m: &ModuleInfo| { &m.types },
                    |m: &mut ModuleInfo| { &mut m.types },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FuncInfo>>(
                    "functions",
                    |m: &ModuleInfo| { &m.functions },
                    |m: &mut ModuleInfo| { &mut m.functions },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FuncImportInfo>>(
                    "func_imports",
                    |m: &ModuleInfo| { &m.func_imports },
                    |m: &mut ModuleInfo| { &mut m.func_imports },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TableInfo>>(
                    "tables",
                    |m: &ModuleInfo| { &m.tables },
                    |m: &mut ModuleInfo| { &mut m.tables },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MemoryInfo>>(
                    "memories",
                    |m: &ModuleInfo| { &m.memories },
                    |m: &mut ModuleInfo| { &mut m.memories },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "start_func",
                    |m: &ModuleInfo| { &m.start_func },
                    |m: &mut ModuleInfo| { &mut m.start_func },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ModuleInfo>(
                    "ModuleInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ModuleInfo {
        static mut instance: ::protobuf::lazy::Lazy<ModuleInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ModuleInfo,
        };
        unsafe {
            instance.get(ModuleInfo::new)
        }
    }
}

impl ::protobuf::Clear for ModuleInfo {
    fn clear(&mut self) {
        self.clear_types();
        self.clear_functions();
        self.clear_func_imports();
        self.clear_tables();
        self.clear_memories();
        self.clear_start_func();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModuleInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModuleInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FuncType {
    // message fields
    pub params: ::std::vec::Vec<ValueType>,
    pub returns: ::std::vec::Vec<ValueType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl FuncType {
    pub fn new() -> FuncType {
        ::std::default::Default::default()
    }

    // repeated .ValueType params = 1;

    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: ::std::vec::Vec<ValueType>) {
        self.params = v;
    }

    // Mutable pointer to the field.
    pub fn mut_params(&mut self) -> &mut ::std::vec::Vec<ValueType> {
        &mut self.params
    }

    // Take field
    pub fn take_params(&mut self) -> ::std::vec::Vec<ValueType> {
        ::std::mem::replace(&mut self.params, ::std::vec::Vec::new())
    }

    pub fn get_params(&self) -> &[ValueType] {
        &self.params
    }

    // repeated .ValueType returns = 2;

    pub fn clear_returns(&mut self) {
        self.returns.clear();
    }

    // Param is passed by value, moved
    pub fn set_returns(&mut self, v: ::std::vec::Vec<ValueType>) {
        self.returns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_returns(&mut self) -> &mut ::std::vec::Vec<ValueType> {
        &mut self.returns
    }

    // Take field
    pub fn take_returns(&mut self) -> ::std::vec::Vec<ValueType> {
        ::std::mem::replace(&mut self.returns, ::std::vec::Vec::new())
    }

    pub fn get_returns(&self) -> &[ValueType] {
        &self.returns
    }
}

impl ::protobuf::Message for FuncType {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.params, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.returns, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.params {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        for value in &self.returns {
            my_size += ::protobuf::rt::enum_size(2, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.params {
            os.write_enum(1, v.value())?;
        };
        for v in &self.returns {
            os.write_enum(2, v.value())?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FuncType {
        FuncType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ValueType>>(
                    "params",
                    |m: &FuncType| { &m.params },
                    |m: &mut FuncType| { &mut m.params },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ValueType>>(
                    "returns",
                    |m: &FuncType| { &m.returns },
                    |m: &mut FuncType| { &mut m.returns },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FuncType>(
                    "FuncType",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FuncType {
        static mut instance: ::protobuf::lazy::Lazy<FuncType> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FuncType,
        };
        unsafe {
            instance.get(FuncType::new)
        }
    }
}

impl ::protobuf::Clear for FuncType {
    fn clear(&mut self) {
        self.clear_params();
        self.clear_returns();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FuncType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FuncType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FuncImportInfo {
    // message fields
    pub module: ::std::string::String,
    pub field: ::std::string::String,
    pub type_id: u32,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl FuncImportInfo {
    pub fn new() -> FuncImportInfo {
        ::std::default::Default::default()
    }

    // string module = 1;

    pub fn clear_module(&mut self) {
        self.module.clear();
    }

    // Param is passed by value, moved
    pub fn set_module(&mut self, v: ::std::string::String) {
        self.module = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module(&mut self) -> &mut ::std::string::String {
        &mut self.module
    }

    // Take field
    pub fn take_module(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.module, ::std::string::String::new())
    }

    pub fn get_module(&self) -> &str {
        &self.module
    }

    // string field = 2;

    pub fn clear_field(&mut self) {
        self.field.clear();
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: ::std::string::String) {
        self.field = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut ::std::string::String {
        &mut self.field
    }

    // Take field
    pub fn take_field(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field, ::std::string::String::new())
    }

    pub fn get_field(&self) -> &str {
        &self.field
    }

    // uint32 type_id = 3;

    pub fn clear_type_id(&mut self) {
        self.type_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_type_id(&mut self, v: u32) {
        self.type_id = v;
    }

    pub fn get_type_id(&self) -> u32 {
        self.type_id
    }

    // string name = 4;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }
}

impl ::protobuf::Message for FuncImportInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.module)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.type_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.module.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.module);
        }
        if !self.field.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field);
        }
        if self.type_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.type_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.module.is_empty() {
            os.write_string(1, &self.module)?;
        }
        if !self.field.is_empty() {
            os.write_string(2, &self.field)?;
        }
        if self.type_id != 0 {
            os.write_uint32(3, self.type_id)?;
        }
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FuncImportInfo {
        FuncImportInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "module",
                    |m: &FuncImportInfo| { &m.module },
                    |m: &mut FuncImportInfo| { &mut m.module },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "field",
                    |m: &FuncImportInfo| { &m.field },
                    |m: &mut FuncImportInfo| { &mut m.field },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "type_id",
                    |m: &FuncImportInfo| { &m.type_id },
                    |m: &mut FuncImportInfo| { &mut m.type_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &FuncImportInfo| { &m.name },
                    |m: &mut FuncImportInfo| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FuncImportInfo>(
                    "FuncImportInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FuncImportInfo {
        static mut instance: ::protobuf::lazy::Lazy<FuncImportInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FuncImportInfo,
        };
        unsafe {
            instance.get(FuncImportInfo::new)
        }
    }
}

impl ::protobuf::Clear for FuncImportInfo {
    fn clear(&mut self) {
        self.clear_module();
        self.clear_field();
        self.clear_type_id();
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FuncImportInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FuncImportInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FuncInfo {
    // message fields
    pub type_id: u32,
    pub name: ::std::string::String,
    pub locals: ::protobuf::RepeatedField<LocalInfo>,
    pub code: ::protobuf::RepeatedField<Operator>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl FuncInfo {
    pub fn new() -> FuncInfo {
        ::std::default::Default::default()
    }

    // uint32 type_id = 1;

    pub fn clear_type_id(&mut self) {
        self.type_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_type_id(&mut self, v: u32) {
        self.type_id = v;
    }

    pub fn get_type_id(&self) -> u32 {
        self.type_id
    }

    // string name = 2;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // repeated .LocalInfo locals = 3;

    pub fn clear_locals(&mut self) {
        self.locals.clear();
    }

    // Param is passed by value, moved
    pub fn set_locals(&mut self, v: ::protobuf::RepeatedField<LocalInfo>) {
        self.locals = v;
    }

    // Mutable pointer to the field.
    pub fn mut_locals(&mut self) -> &mut ::protobuf::RepeatedField<LocalInfo> {
        &mut self.locals
    }

    // Take field
    pub fn take_locals(&mut self) -> ::protobuf::RepeatedField<LocalInfo> {
        ::std::mem::replace(&mut self.locals, ::protobuf::RepeatedField::new())
    }

    pub fn get_locals(&self) -> &[LocalInfo] {
        &self.locals
    }

    // repeated .Operator code = 4;

    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::protobuf::RepeatedField<Operator>) {
        self.code = v;
    }

    // Mutable pointer to the field.
    pub fn mut_code(&mut self) -> &mut ::protobuf::RepeatedField<Operator> {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::protobuf::RepeatedField<Operator> {
        ::std::mem::replace(&mut self.code, ::protobuf::RepeatedField::new())
    }

    pub fn get_code(&self) -> &[Operator] {
        &self.code
    }
}

impl ::protobuf::Message for FuncInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.locals {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.code {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.type_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.locals)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.type_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.type_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.locals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.code {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.type_id != 0 {
            os.write_uint32(1, self.type_id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.locals {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.code {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FuncInfo {
        FuncInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "type_id",
                    |m: &FuncInfo| { &m.type_id },
                    |m: &mut FuncInfo| { &mut m.type_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &FuncInfo| { &m.name },
                    |m: &mut FuncInfo| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LocalInfo>>(
                    "locals",
                    |m: &FuncInfo| { &m.locals },
                    |m: &mut FuncInfo| { &mut m.locals },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Operator>>(
                    "code",
                    |m: &FuncInfo| { &m.code },
                    |m: &mut FuncInfo| { &mut m.code },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FuncInfo>(
                    "FuncInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FuncInfo {
        static mut instance: ::protobuf::lazy::Lazy<FuncInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FuncInfo,
        };
        unsafe {
            instance.get(FuncInfo::new)
        }
    }
}

impl ::protobuf::Clear for FuncInfo {
    fn clear(&mut self) {
        self.clear_type_id();
        self.clear_name();
        self.clear_locals();
        self.clear_code();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FuncInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FuncInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TableInfo {
    // message fields
    pub initial: u32,
    pub maximum: u32,
    pub has_maximum: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TableInfo {
    pub fn new() -> TableInfo {
        ::std::default::Default::default()
    }

    // uint32 initial = 1;

    pub fn clear_initial(&mut self) {
        self.initial = 0;
    }

    // Param is passed by value, moved
    pub fn set_initial(&mut self, v: u32) {
        self.initial = v;
    }

    pub fn get_initial(&self) -> u32 {
        self.initial
    }

    // uint32 maximum = 2;

    pub fn clear_maximum(&mut self) {
        self.maximum = 0;
    }

    // Param is passed by value, moved
    pub fn set_maximum(&mut self, v: u32) {
        self.maximum = v;
    }

    pub fn get_maximum(&self) -> u32 {
        self.maximum
    }

    // bool has_maximum = 3;

    pub fn clear_has_maximum(&mut self) {
        self.has_maximum = false;
    }

    // Param is passed by value, moved
    pub fn set_has_maximum(&mut self, v: bool) {
        self.has_maximum = v;
    }

    pub fn get_has_maximum(&self) -> bool {
        self.has_maximum
    }
}

impl ::protobuf::Message for TableInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.initial = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.maximum = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_maximum = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.initial != 0 {
            my_size += ::protobuf::rt::value_size(1, self.initial, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maximum != 0 {
            my_size += ::protobuf::rt::value_size(2, self.maximum, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.has_maximum != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.initial != 0 {
            os.write_uint32(1, self.initial)?;
        }
        if self.maximum != 0 {
            os.write_uint32(2, self.maximum)?;
        }
        if self.has_maximum != false {
            os.write_bool(3, self.has_maximum)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TableInfo {
        TableInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "initial",
                    |m: &TableInfo| { &m.initial },
                    |m: &mut TableInfo| { &mut m.initial },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "maximum",
                    |m: &TableInfo| { &m.maximum },
                    |m: &mut TableInfo| { &mut m.maximum },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "has_maximum",
                    |m: &TableInfo| { &m.has_maximum },
                    |m: &mut TableInfo| { &mut m.has_maximum },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TableInfo>(
                    "TableInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TableInfo {
        static mut instance: ::protobuf::lazy::Lazy<TableInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TableInfo,
        };
        unsafe {
            instance.get(TableInfo::new)
        }
    }
}

impl ::protobuf::Clear for TableInfo {
    fn clear(&mut self) {
        self.clear_initial();
        self.clear_maximum();
        self.clear_has_maximum();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TableInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TableInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MemoryInfo {
    // message fields
    pub initial: u32,
    pub maximum: u32,
    pub has_maximum: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl MemoryInfo {
    pub fn new() -> MemoryInfo {
        ::std::default::Default::default()
    }

    // uint32 initial = 1;

    pub fn clear_initial(&mut self) {
        self.initial = 0;
    }

    // Param is passed by value, moved
    pub fn set_initial(&mut self, v: u32) {
        self.initial = v;
    }

    pub fn get_initial(&self) -> u32 {
        self.initial
    }

    // uint32 maximum = 2;

    pub fn clear_maximum(&mut self) {
        self.maximum = 0;
    }

    // Param is passed by value, moved
    pub fn set_maximum(&mut self, v: u32) {
        self.maximum = v;
    }

    pub fn get_maximum(&self) -> u32 {
        self.maximum
    }

    // bool has_maximum = 3;

    pub fn clear_has_maximum(&mut self) {
        self.has_maximum = false;
    }

    // Param is passed by value, moved
    pub fn set_has_maximum(&mut self, v: bool) {
        self.has_maximum = v;
    }

    pub fn get_has_maximum(&self) -> bool {
        self.has_maximum
    }
}

impl ::protobuf::Message for MemoryInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.initial = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.maximum = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_maximum = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.initial != 0 {
            my_size += ::protobuf::rt::value_size(1, self.initial, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maximum != 0 {
            my_size += ::protobuf::rt::value_size(2, self.maximum, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.has_maximum != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.initial != 0 {
            os.write_uint32(1, self.initial)?;
        }
        if self.maximum != 0 {
            os.write_uint32(2, self.maximum)?;
        }
        if self.has_maximum != false {
            os.write_bool(3, self.has_maximum)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MemoryInfo {
        MemoryInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "initial",
                    |m: &MemoryInfo| { &m.initial },
                    |m: &mut MemoryInfo| { &mut m.initial },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "maximum",
                    |m: &MemoryInfo| { &m.maximum },
                    |m: &mut MemoryInfo| { &mut m.maximum },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "has_maximum",
                    |m: &MemoryInfo| { &m.has_maximum },
                    |m: &mut MemoryInfo| { &mut m.has_maximum },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MemoryInfo>(
                    "MemoryInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MemoryInfo {
        static mut instance: ::protobuf::lazy::Lazy<MemoryInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MemoryInfo,
        };
        unsafe {
            instance.get(MemoryInfo::new)
        }
    }
}

impl ::protobuf::Clear for MemoryInfo {
    fn clear(&mut self) {
        self.clear_initial();
        self.clear_maximum();
        self.clear_has_maximum();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MemoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MemoryInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalInfo {
    // message fields
    pub count: u32,
    pub ty: ValueType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl LocalInfo {
    pub fn new() -> LocalInfo {
        ::std::default::Default::default()
    }

    // uint32 count = 1;

    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = v;
    }

    pub fn get_count(&self) -> u32 {
        self.count
    }

    // .ValueType ty = 2;

    pub fn clear_ty(&mut self) {
        self.ty = ValueType::I32;
    }

    // Param is passed by value, moved
    pub fn set_ty(&mut self, v: ValueType) {
        self.ty = v;
    }

    pub fn get_ty(&self) -> ValueType {
        self.ty
    }
}

impl ::protobuf::Message for LocalInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.count = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.ty, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ty != ValueType::I32 {
            my_size += ::protobuf::rt::enum_size(2, self.ty);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.count != 0 {
            os.write_uint32(1, self.count)?;
        }
        if self.ty != ValueType::I32 {
            os.write_enum(2, self.ty.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocalInfo {
        LocalInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "count",
                    |m: &LocalInfo| { &m.count },
                    |m: &mut LocalInfo| { &mut m.count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ValueType>>(
                    "ty",
                    |m: &LocalInfo| { &m.ty },
                    |m: &mut LocalInfo| { &mut m.ty },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LocalInfo>(
                    "LocalInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LocalInfo {
        static mut instance: ::protobuf::lazy::Lazy<LocalInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LocalInfo,
        };
        unsafe {
            instance.get(LocalInfo::new)
        }
    }
}

impl ::protobuf::Clear for LocalInfo {
    fn clear(&mut self) {
        self.clear_count();
        self.clear_ty();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Operator {
    // message fields
    pub op: Op,
    pub immediates: ::std::vec::Vec<u64>,
    pub has_block_ty: bool,
    pub block_ty: ValueType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Operator {
    pub fn new() -> Operator {
        ::std::default::Default::default()
    }

    // .Op op = 1;

    pub fn clear_op(&mut self) {
        self.op = Op::Nop;
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: Op) {
        self.op = v;
    }

    pub fn get_op(&self) -> Op {
        self.op
    }

    // repeated uint64 immediates = 2;

    pub fn clear_immediates(&mut self) {
        self.immediates.clear();
    }

    // Param is passed by value, moved
    pub fn set_immediates(&mut self, v: ::std::vec::Vec<u64>) {
        self.immediates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_immediates(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.immediates
    }

    // Take field
    pub fn take_immediates(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.immediates, ::std::vec::Vec::new())
    }

    pub fn get_immediates(&self) -> &[u64] {
        &self.immediates
    }

    // bool has_block_ty = 3;

    pub fn clear_has_block_ty(&mut self) {
        self.has_block_ty = false;
    }

    // Param is passed by value, moved
    pub fn set_has_block_ty(&mut self, v: bool) {
        self.has_block_ty = v;
    }

    pub fn get_has_block_ty(&self) -> bool {
        self.has_block_ty
    }

    // .ValueType block_ty = 4;

    pub fn clear_block_ty(&mut self) {
        self.block_ty = ValueType::I32;
    }

    // Param is passed by value, moved
    pub fn set_block_ty(&mut self, v: ValueType) {
        self.block_ty = v;
    }

    pub fn get_block_ty(&self) -> ValueType {
        self.block_ty
    }
}

impl ::protobuf::Message for Operator {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.op, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.immediates)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_block_ty = tmp;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.block_ty, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.op != Op::Nop {
            my_size += ::protobuf::rt::enum_size(1, self.op);
        }
        for value in &self.immediates {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.has_block_ty != false {
            my_size += 2;
        }
        if self.block_ty != ValueType::I32 {
            my_size += ::protobuf::rt::enum_size(4, self.block_ty);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.op != Op::Nop {
            os.write_enum(1, self.op.value())?;
        }
        for v in &self.immediates {
            os.write_uint64(2, *v)?;
        };
        if self.has_block_ty != false {
            os.write_bool(3, self.has_block_ty)?;
        }
        if self.block_ty != ValueType::I32 {
            os.write_enum(4, self.block_ty.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Operator {
        Operator::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Op>>(
                    "op",
                    |m: &Operator| { &m.op },
                    |m: &mut Operator| { &mut m.op },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "immediates",
                    |m: &Operator| { &m.immediates },
                    |m: &mut Operator| { &mut m.immediates },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "has_block_ty",
                    |m: &Operator| { &m.has_block_ty },
                    |m: &mut Operator| { &mut m.has_block_ty },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ValueType>>(
                    "block_ty",
                    |m: &Operator| { &m.block_ty },
                    |m: &mut Operator| { &mut m.block_ty },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Operator>(
                    "Operator",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Operator {
        static mut instance: ::protobuf::lazy::Lazy<Operator> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Operator,
        };
        unsafe {
            instance.get(Operator::new)
        }
    }
}

impl ::protobuf::Clear for Operator {
    fn clear(&mut self) {
        self.clear_op();
        self.clear_immediates();
        self.clear_has_block_ty();
        self.clear_block_ty();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Operator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Operator {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ValueType {
    I32 = 0,
    I64 = 1,
    F32 = 2,
    F64 = 3,
}

impl ::protobuf::ProtobufEnum for ValueType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ValueType> {
        match value {
            0 => ::std::option::Option::Some(ValueType::I32),
            1 => ::std::option::Option::Some(ValueType::I64),
            2 => ::std::option::Option::Some(ValueType::F32),
            3 => ::std::option::Option::Some(ValueType::F64),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ValueType] = &[
            ValueType::I32,
            ValueType::I64,
            ValueType::F32,
            ValueType::F64,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ValueType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ValueType {
}

impl ::std::default::Default for ValueType {
    fn default() -> Self {
        ValueType::I32
    }
}

impl ::protobuf::reflect::ProtobufValue for ValueType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Op {
    Nop = 0,
}

impl ::protobuf::ProtobufEnum for Op {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Op> {
        match value {
            0 => ::std::option::Option::Some(Op::Nop),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Op] = &[
            Op::Nop,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Op", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Op {
}

impl ::std::default::Default for Op {
    fn default() -> Self {
        Op::Nop
    }
}

impl ::protobuf::reflect::ProtobufValue for Op {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cmodule.proto\"\xf6\x01\n\nModuleInfo\x12\x1f\n\x05types\x18\x01\
    \x20\x03(\x0b2\t.FuncTypeR\x05types\x12'\n\tfunctions\x18\x02\x20\x03(\
    \x0b2\t.FuncInfoR\tfunctions\x122\n\x0cfunc_imports\x18\x03\x20\x03(\x0b\
    2\x0f.FuncImportInfoR\x0bfuncImports\x12\"\n\x06tables\x18\x04\x20\x03(\
    \x0b2\n.TableInfoR\x06tables\x12'\n\x08memories\x18\x05\x20\x03(\x0b2\
    \x0b.MemoryInfoR\x08memories\x12\x1d\n\nstart_func\x18\x06\x20\x01(\rR\t\
    startFunc\"T\n\x08FuncType\x12\"\n\x06params\x18\x01\x20\x03(\x0e2\n.Val\
    ueTypeR\x06params\x12$\n\x07returns\x18\x02\x20\x03(\x0e2\n.ValueTypeR\
    \x07returns\"k\n\x0eFuncImportInfo\x12\x16\n\x06module\x18\x01\x20\x01(\
    \tR\x06module\x12\x14\n\x05field\x18\x02\x20\x01(\tR\x05field\x12\x17\n\
    \x07type_id\x18\x03\x20\x01(\rR\x06typeId\x12\x12\n\x04name\x18\x04\x20\
    \x01(\tR\x04name\"z\n\x08FuncInfo\x12\x17\n\x07type_id\x18\x01\x20\x01(\
    \rR\x06typeId\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\"\n\x06l\
    ocals\x18\x03\x20\x03(\x0b2\n.LocalInfoR\x06locals\x12\x1d\n\x04code\x18\
    \x04\x20\x03(\x0b2\t.OperatorR\x04code\"`\n\tTableInfo\x12\x18\n\x07init\
    ial\x18\x01\x20\x01(\rR\x07initial\x12\x18\n\x07maximum\x18\x02\x20\x01(\
    \rR\x07maximum\x12\x1f\n\x0bhas_maximum\x18\x03\x20\x01(\x08R\nhasMaximu\
    m\"a\n\nMemoryInfo\x12\x18\n\x07initial\x18\x01\x20\x01(\rR\x07initial\
    \x12\x18\n\x07maximum\x18\x02\x20\x01(\rR\x07maximum\x12\x1f\n\x0bhas_ma\
    ximum\x18\x03\x20\x01(\x08R\nhasMaximum\"=\n\tLocalInfo\x12\x14\n\x05cou\
    nt\x18\x01\x20\x01(\rR\x05count\x12\x1a\n\x02ty\x18\x02\x20\x01(\x0e2\n.\
    ValueTypeR\x02ty\"\x88\x01\n\x08Operator\x12\x13\n\x02op\x18\x01\x20\x01\
    (\x0e2\x03.OpR\x02op\x12\x1e\n\nimmediates\x18\x02\x20\x03(\x04R\nimmedi\
    ates\x12\x20\n\x0chas_block_ty\x18\x03\x20\x01(\x08R\nhasBlockTy\x12%\n\
    \x08block_ty\x18\x04\x20\x01(\x0e2\n.ValueTypeR\x07blockTy*/\n\tValueTyp\
    e\x12\x07\n\x03I32\x10\0\x12\x07\n\x03I64\x10\x01\x12\x07\n\x03F32\x10\
    \x02\x12\x07\n\x03F64\x10\x03*\r\n\x02Op\x12\x07\n\x03Nop\x10\0B\x08Z\
    \x06protosb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
